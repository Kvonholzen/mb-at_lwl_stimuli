"bird",
"boat",
"book",
"bottle",
"car",
"carrots",
"bat",
"cookie",
"cow",
"cup",
"duck",
"fish (animal)",
"foot",
"frog",
"hand",
"horse",
"juice",
"lion",
"milk",
"monkey",
"shoe",
"sock",
"spoon",
"train",
"truck")
word_list <- as.data.frame(word_list)
word_list$order <- rownames(word_list)
dat <- merge(by_item_means, word_list, by.x = "target_label", by.y = "word_list", all.y = T)
dat <- dat %>%
pivot_wider(names_from = needed_bins, values_from = target_looking)
View(dat)
str(dat)
dat <- merge(by_item_means, word_list, by.x = "target_label", by.y = "word_list", all.y = T)
dat <- dat %>%
pivot_wider(names_from = needed_bins, values_from = target_looking)
dat <- dat[,c("order", "target_label", "(12,18)", "(18,24)", "(24,60)")]
dat$order <- as.numeric(dat$order)
View(dat)
# load the library
library(childesr)
install.packages("childesr")
# load the library
library(childesr)
library(dplyr)
# check how language is coded
d_transcripts <- get_transcripts()
View(d_transcripts)
unique(d_transcripts$language)
# get English, Northern America transcripts
d_eng_na <- get_transcripts(collection = "Eng-NA")
View(d_eng_na)
d_age_range <- get_participants(collection = "Eng-NA", age = c(24, 36))
View(d_age_range)
d_age_range <- get_participants(collection = "Eng-NA", age = c(12, 36))
View(d_age_range)
View(d_eng_na)
?get_tokens
d_prod <- get_tokens(collection = "Eng-NA",
age = c(12, 36),
role = "target_child",
token = c("dog", "ball"))
View(d_prod)
word_list <- c("dog",
"doggy",
"eat",
"sit",
"sleep",
"drink (action)",
"hug",
"kiss",
"point",
"stand",
"play",
"apple",
"baby",
"ball",
"banana",
"bird",
"boat",
"book",
"bottle",
"car",
"carrots",
"bat",
"cookie",
"cow",
"cup",
"duck",
"fish (animal)",
"foot",
"frog",
"hand",
"horse",
"juice",
"lion",
"milk",
"monkey",
"shoe",
"sock",
"spoon",
"train",
"truck")
d_prod <- get_tokens(collection = "Eng-NA",
age = c(12, 36),
role = "target_child",
token = word_list)
View(d_prod)
View(d_prod)
prod_sum <- d_prod %>%
group_by(gloss, corpus_name, target_child_age, target_child_id)
View(prod_sum)
prod_sum <- d_prod %>%
group_by(gloss, corpus_name, target_child_age, target_child_id)%>%
summarise(total_utt = n())
View(prod_sum)
prod_sum <- d_prod %>%
group_by(gloss, corpus_name, target_child_age, target_child_name)%>%
summarise(total_utt = n())
prod_sum <- d_prod %>%
group_by(gloss, corpus_name, target_child_age, target_child_name)%>%
summarise(word_utt = n())
speaker_stats <- get_speaker_statistics(collection = "Eng-NA",
age = c(12, 36),
role = "target_child",
token = word_list)
speaker_stats <- get_speaker_statistics(collection = "Eng-NA",
age = c(12, 36),
role = "target_child")
View(speaker_stats)
View(d_prod)
speaker_stats <- speaker_stats[,c("speaker_id", "target_child_age", "num_utterances", "num_tokens")]
prod_sum <- d_prod %>%
group_by(gloss, corpus_name, target_child_age, speaker_id)%>%
summarise(word_utt = n())
speaker_stats <- get_speaker_statistics(collection = "Eng-NA",
age = c(12, 36),
role = "target_child")
speaker_stats <- speaker_stats[,c("speaker_id", "target_child_age", "num_utterances", "num_tokens")]
prod_stats <- merge(prod_sum, speaker_stats, by = c("speaker_id", "target_child_age"))
View(prod_stats)
prod_stats$token_ratio <- prod_stats$word_utt/prod_stats$num_tokens
sp <- prod_stats %>%
group_by(gloss)%>%
summarise(avg_token_ratio = mean(token_ratio, na.rm = T))
View(sp)
prod_stats$gloss <- tolower(prod_stats$gloss)
sp <- prod_stats %>%
group_by(gloss)%>%
summarise(avg_token_ratio = mean(token_ratio, na.rm = T))
View(sp)
mean(0)
mean(c(1,NA))
# prod_stats gives wierd Inf in some token_ratio rows
prod_stats < subset(prod_stats, token_ratio != Inf)
prod_stats <- merge(prod_sum, speaker_stats, by = c("speaker_id", "target_child_age"))
prod_stats$token_ratio <- prod_stats$word_utt/prod_stats$num_tokens
prod_stats$gloss <- tolower(prod_stats$gloss)
# num_tokens is 0 for some children
# remove them, can't have those 0's!
prod_stats < subset(prod_stats, num_tokens != 0)
prod_stats <- merge(prod_sum, speaker_stats, by = c("speaker_id", "target_child_age"))
prod_stats < subset(prod_stats, num_tokens != 0)
prod_stats <- merge(prod_sum, speaker_stats, by = c("speaker_id", "target_child_age"))
prod_stats <- subset(prod_stats, num_tokens != 0)
prod_stats$token_ratio <- prod_stats$word_utt/prod_stats$num_tokens
prod_stats$gloss <- tolower(prod_stats$gloss)
sp <- prod_stats %>%
group_by(gloss)%>%
summarise(avg_token_ratio = mean(token_ratio, na.rm = T))
View(sp)
word_list <- as.data.frame(word_list)
word_list$order <- rownames(word_list)
dat <- merge(sp, word_list, by.x = "gloss", by.y = "word_list", all.y = T)
View(dat)
dat$order <- as.numeric(dat$order)
# load the library
library(childesr)
library(dplyr)
word_list <- c("dog",
"doggy",
"eat",
"sit",
"sleep",
"drink",
"hug",
"kiss",
"point",
"stand",
"play",
"apple",
"baby",
"ball",
"banana",
"bird",
"boat",
"book",
"bottle",
"car",
"carrots",
"bat",
"cookie",
"cow",
"cup",
"duck",
"fish",
"foot",
"frog",
"hand",
"horse",
"juice",
"lion",
"milk",
"monkey",
"shoe",
"sock",
"spoon",
"train",
"truck")
d_prod <- get_tokens(collection = "Eng-NA",
age = c(12, 36),
role = "target_child",
token = word_list)
# get number of utterances per child, per word
prod_sum <- d_prod %>%
group_by(gloss, corpus_name, target_child_age, speaker_id)%>%
summarise(word_utt = n())
speaker_stats <- get_speaker_statistics(collection = "Eng-NA",
age = c(12, 36),
role = "target_child")
speaker_stats <- speaker_stats[,c("speaker_id", "target_child_age", "num_utterances", "num_tokens")]
prod_stats <- merge(prod_sum, speaker_stats, by = c("speaker_id", "target_child_age"))
# num_tokens is 0 for some children
# remove them, can't have those 0's!
prod_stats <- subset(prod_stats, num_tokens != 0)
prod_stats$token_ratio <- prod_stats$word_utt/prod_stats$num_tokens
prod_stats$gloss <- tolower(prod_stats$gloss)
sp <- prod_stats %>%
group_by(gloss)%>%
summarise(avg_token_ratio = mean(token_ratio, na.rm = T))
dat <- dat[,c("order", "gloss", "avg_token_ratio")]
# load the library
library(childesr)
library(dplyr)
word_list <- c("dog",
"doggy",
"eat",
"sit",
"sleep",
"drink",
"hug",
"kiss",
"point",
"stand",
"play",
"apple",
"baby",
"ball",
"banana",
"bird",
"boat",
"book",
"bottle",
"car",
"carrots",
"bat",
"cookie",
"cow",
"cup",
"duck",
"fish",
"foot",
"frog",
"hand",
"horse",
"juice",
"lion",
"milk",
"monkey",
"shoe",
"sock",
"spoon",
"train",
"truck")
d_prod <- get_tokens(collection = "Eng-NA",
age = c(12, 36),
role = "target_child",
token = word_list)
# get number of utterances per child, per word
prod_sum <- d_prod %>%
group_by(gloss, corpus_name, target_child_age, speaker_id)%>%
summarise(word_utt = n())
speaker_stats <- get_speaker_statistics(collection = "Eng-NA",
age = c(12, 36),
role = "target_child")
speaker_stats <- speaker_stats[,c("speaker_id", "target_child_age", "num_utterances", "num_tokens")]
prod_stats <- merge(prod_sum, speaker_stats, by = c("speaker_id", "target_child_age"))
# num_tokens is 0 for some children
# remove them, can't have those 0's!
prod_stats <- subset(prod_stats, num_tokens != 0)
prod_stats$token_ratio <- prod_stats$word_utt/prod_stats$num_tokens
prod_stats$gloss <- tolower(prod_stats$gloss)
sp <- prod_stats %>%
group_by(gloss)%>%
summarise(avg_token_ratio = mean(token_ratio, na.rm = T))
word_list <- as.data.frame(word_list)
word_list$order <- rownames(word_list)
dat <- merge(sp, word_list, by.x = "gloss", by.y = "word_list", all.y = T)
dat <- dat[,c("order", "gloss", "avg_token_ratio")]
dat$order <- as.numeric(dat$order)
library(wordbankr)
get_instruments()
library(childesr)
get_transcripts()
gt <- get_transcripts()
View(gt)
?get_transcripts
unique(gt$language)
gt <- get_transcripts(collection = "Clinical")
View(gt)
gt <- get_transcripts(collection = "Eng-AAE")
View(gt)
gt <- get_transcripts(collection = "DutchAfrikaans")
View(gt)
library(tidyr)
Sys.info()
knitr::opts_chunk$set(echo = TRUE)
# R version 4.1.0 (2021-05-18) -- "Camp Pontanezen"
library(wordbankr)
library(childesr)
library(tidyr)
#Wordbank
# get_instruments()
wordbank_lang <- "English (American)"
admin_info <- get_administration_data(language = wordbank_lang)
View(admin_info)
admin_info <- get_administration_data(language = "German")
View(admin_info)
items_info <- get_item_data(language = wordbank_lang)
View(items_info)
unique(items_info$form)
unique(admin_info$form)
# narrow down to just words
items_info <- items_info %>%
filter(type == "word")
# narrow down to just words
items_info <- items_info %>%
filter(type = "word")
?filter
unique(items_info$type)
# narrow down to just words
items_info <- items_info %>%
filter(type == "word")
# narrow down to just words
items_info <- items_info |>
filter(type == "word")
filter(items_info, type == "word")
# narrow down to just words
items_info <- items_info %>%
filter(type == "word")
filter(items_info, type = "word")
library(tidyr)
# narrow down to just words
items_info <- items_info %>%
filter(type == "word")
library(dplyr)
# narrow down to just words
items_info <- items_info %>%
filter(type == "word")
View(items_info)
unique(items_info$category)
unique(items_info$lexical_class)
# narrow down to just words
items_info <- items_info %>%
filter(type == "word") %>%
filter(category == "nouns" | category == "verbs")
unique(items_info$category)
View(items_info)
items_info <- get_item_data(language = wordbank_lang)
# narrow down to just words
items_info <- items_info %>%
filter(category == "nouns" | category == "verbs")
View(items_info)
items_info <- get_item_data(language = wordbank_lang)
unique(items_info$category)
items_info <- get_item_data(language = wordbank_lang)
# narrow down to just words
items_info <- items_info %>%
filter(lexical_class == "nouns" | lexical_class == "verbs")
View(item_info)
View(items_info)
unique(items_info$category)
VieW(items_info)
View(items_info)
word_list <- as.list(unique(items_info$definition))
word_list
word_list <- list(unique(items_info$definition))
word_list
form_list <- list(unique(items_info$form))
form_list
i=1
f.data <- get_instrument_data(language = wordbank_lang,
form = form_list[i],
administrations = TRUE,
iteminfo = TRUE)
form_list
form_list <- list(unique(items_info$form))
form_list
form_list <- as.list(unique(items_info$form))
for(i in 1:length(form_list)){
f.data <- get_instrument_data(language = wordbank_lang,
form = form_list[i],
administrations = TRUE,
iteminfo = TRUE)
}
f.data <- get_instrument_data(language = wordbank_lang,
form = form_list[i],
administrations = TRUE,
iteminfo = TRUE)
View(f.data)
fit_aoa(f.data)
?fit_aoa
fa <- fit_aoa(eng_ws_data,
measure = "understands",
method = "empirical",
proportion = 0.5)
fa <- fit_aoa(f.data,
measure = "understands",
method = "empirical",
proportion = 0.5)
View(fa)
ncol(f.data)
aoa.prod <- fit_aoa(f.data,
measure = "produces",
method = "empirical",
proportion = 0.5)
View(aoa.prod)
ncol(aoa.prod)
aoa.comp <- fit_aoa(f.data,
measure = "understands",
method = "empirical",
proportion = 0.5)
aoa.comp$aoa_type <- "understands"
aoa.prod <- fit_aoa(f.data,
measure = "produces",
method = "empirical",
proportion = 0.5)
aoa.prod$aoa_type <- "produces"
View(aoa.comp)
aoa_mat <- data.frame(matrix(NA, nrow=0, ncol=10))
rm(i)
for(i in 1:length(form_list)){
f.data <- get_instrument_data(language = wordbank_lang,
form = form_list[i],
administrations = TRUE,
iteminfo = TRUE)
aoa.comp <- fit_aoa(f.data,
measure = "understands",
method = "empirical",
proportion = 0.5)
aoa.comp$aoa_type <- "understands"
aoa.prod <- fit_aoa(f.data,
measure = "produces",
method = "empirical",
proportion = 0.5)
aoa.prod$aoa_type <- "produces"
aoa.cp <- rbind(aoa.comp, aoa.prod)
aoa.cp$form <- form_list[i]
aoa.mat <- rbind(aoa.mat, aoa.cp)
}
aoa.mat <- data.frame(matrix(NA, nrow=0, ncol=10))
rm(i)
aoa.mat <- data.frame(matrix(NA, nrow=0, ncol=10))
for(i in 1:length(form_list)){
f.data <- get_instrument_data(language = wordbank_lang,
form = form_list[i],
administrations = TRUE,
iteminfo = TRUE)
aoa.comp <- fit_aoa(f.data,
measure = "understands",
method = "empirical",
proportion = 0.5)
aoa.comp$aoa_type <- "understands"
aoa.prod <- fit_aoa(f.data,
measure = "produces",
method = "empirical",
proportion = 0.5)
aoa.prod$aoa_type <- "produces"
aoa.cp <- rbind(aoa.comp, aoa.prod)
aoa.cp$form <- form_list[i]
aoa.mat <- rbind(aoa.mat, aoa.cp)
}
View(aoa.mat)
view(admin_info)
View(admin_info)
# narrow down to just nouns and verbs
aoa.m <- aoa.mat %>%
filter(lexical_class == "nouns" | lexical_class == "verbs")
View(aoa.m)
# narrow down to just nouns and verbs
# make wider so that we have one column for understands and one for produces
# for each form?
aoa.m <- aoa.mat %>%
filter(lexical_class == "nouns" | lexical_class == "verbs") %>%
pivot_wider(names_from = aoa_type:form, values_from = aoa)
View(aoa.m)
# narrow down to just nouns and verbs
# make wider so that we have one column for understands and one for produces
# for each form?
aoa.m <- aoa.mat %>%
filter(lexical_class == "nouns" | lexical_class == "verbs") %>%
pivot_wider(names_from = form, values_from = aoa)
View(aoa.m)
